
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.svm import SVC

# Load the CSV file into a DataFrame
dataFrame = pd.read_csv("StressLevelDataset.csv")

# Determine the two features with the most impact on 'stress_level' (replace with actual feature selection method)
selected_features = ['anxiety_level', 'self_esteem']

# Extract selected features and the target variable
X = dataFrame[selected_features]
y = dataFrame['stress_level']

# Split data into training set and testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("-------------------------- Logistic Regression --------------------------\n")
# Create a logistic regression model
model = LogisticRegression()

# Fit the model to the training data
model.fit(X_train, y_train)

# Predict stress levels on the test data
y_pred = model.predict(X_test)

# Evaluate the model
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
classification_report_str = classification_report(y_test, y_pred)

print("Accuracy in logistic regression:", accuracy)
print("Confusion Matrix for logistic regression: \n", confusion)
print("Classification Report:\n", classification_report_str)

# Get the class labels
class_labels = model.classes_

# Plot the confusion matrix as a heatmap with class labels
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, fmt='d', cmap='RdPu', cbar=False,
            xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title(f'Confusion Matrix for Logistic Regression (Accuracy: {accuracy:f})')
plt.show()

print("-------------------------- Decision Tree --------------------------\n")
# Create a decision tree classifier
model = DecisionTreeClassifier(random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Predict stress levels on the test data
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
classification_report_str = classification_report(y_test, y_pred)

print("Accuracy in Decision Tree:", accuracy)
print("Confusion Matrix:\n", confusion)
print("Classification Report for Decision Tree:\n", classification_report_str)

# Get the class labels
class_labels = model.classes_

# Plot the confusion matrix as a heatmap with a pink colormap ('RdPu')
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, fmt='d', cmap='RdPu', cbar=False,
            xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title(f'Confusion Matrix for Decision Tree (Accuracy: {accuracy:f})')
plt.show()

print("-------------------------- Random Forest --------------------------\n")
# Create a Random Forest classifier
model = RandomForestClassifier(random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Predict stress levels on the test data
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
classification_report_str = classification_report(y_test, y_pred)

print("Accuracy in Random Forest:", accuracy)
print("Confusion Matrix:\n", confusion)
print("Classification Report for Random Forest:\n", classification_report_str)

# Get the class labels
class_labels = model.classes_

# Plot the confusion matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, fmt='d', cmap='RdPu', cbar=False,
            xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title(f'Confusion Matrix for Random Forest (Accuracy: {accuracy:f})')
plt.show()

print("-------------------------- AdaBoost --------------------------\n")
# Create an AdaBoostClassifier
model = AdaBoostClassifier(random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Predict stress levels on the test data
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
classification_report_str = classification_report(y_test, y_pred)

# Get the class labels
class_labels = model.classes_

# Plot the confusion matrix as a heatmap with accuracy in the title
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, fmt='d', cmap='RdPu', cbar=False,
            xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title(f'Confusion Matrix for AdaBoost (Accuracy: {accuracy:f})')
plt.show()

print("Accuracy in AdaBoost:", accuracy)
print("Confusion Matrix:\n", confusion)
print("Classification Report:\n", classification_report_str)


print("-------------------------- Bagging --------------------------\n")
# Create a base classifier (e.g., Decision Tree)
base_classifier = DecisionTreeClassifier(random_state=42)

# Create a BaggingClassifier using the base classifier
bagging_model = BaggingClassifier(base_classifier, n_estimators=100, random_state=42)

# Fit the BaggingClassifier to the training data
bagging_model.fit(X_train, y_train)

# Predict stress levels on the test data
y_pred = bagging_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
classification_report_str = classification_report(y_test, y_pred)

# Get the class labels
class_labels = bagging_model.classes_

# Plot the confusion matrix as a heatmap with accuracy in the title
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, fmt='d', cmap='RdPu', cbar=False,
            xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title(f'Confusion Matrix for Bagging (Accuracy: {accuracy:f})')
plt.show()

print("Accuracy in Bagging:", accuracy)
print("Confusion Matrix:\n", confusion)
print("Classification Report:\n", classification_report_str)

print("-------------------------- SVM --------------------------\n")

# Create an SVM classifier
svm_model = SVC(kernel='linear', random_state=42)

# Fit the model to the training data
svm_model.fit(X_train, y_train)

# Predict stress levels on the test data
y_pred = svm_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
classification_report_str = classification_report(y_test, y_pred)

# Get the class labels
class_labels = svm_model.classes_

# Plot the confusion matrix as a heatmap with accuracy in the title
plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, fmt='d', cmap='RdPu', cbar=False,
            xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title(f'Confusion Matrix for SVM (Accuracy: {accuracy:f})')
plt.show()

print("Accuracy in SVM:", accuracy)
print("Confusion Matrix:\n", confusion)
print("Classification Report:\n", classification_report_str)
